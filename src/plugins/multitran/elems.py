#!/usr/bin/python3
# -*- coding: UTF-8 -*-

import shared    as sh
import sharedGUI as sg

import gettext, gettext_windows

gettext_windows.setup_env()
gettext.install('mclient','../resources/locale')


class Elems:
    
    def __init__(self,data1,data2):
        f = '[MClient] plugins.multitran.elems.Elems.__init__'
        self.values()
        self._data1 = data1
        self._data2 = data2
        if not self._data1 or not self._data2:
            self.Success = False
            sh.com.empty(f)
    
    def values(self):
        self._data   = []
        self.Success = True
    
    def duplicates(self):
        ''' Remove duplicate blocks generated by both plugins.
            #note: the analysis is block-based, so, if one plugin has
            generated some block with an adjacent block having
            SameCell=1 (e.g., term + comment), and the other plugin has
            generated an identical block but without adjacent blocks
            having SameCell=1 (e.g., a term without a comment), then
            adjacent blocks having SameCell=1 may loose their implied
            order.
        '''
        f = '[MClient] plugins.multitran.elems.Elems.duplicates'
        if self.Success:
            self._data1 = [list(item) for item in self._data1]
            for block in self._data1:
                block[8] = block[8].strip()
            count = 0
            for block in self._data2:
                dica  = block[2]
                dicaf = block[30]
                btype = block[7]
                text  = block[8].strip()
                i = 0
                while i < len(self._data1):
                    dica1  = self._data1[i][2]
                    dicaf1 = self._data1[i][30]
                    btype1 = self._data1[i][7]
                    text1  = self._data1[i][8]
                    cond1  = text and (text == text1)
                    cond2  = dica == dica1 or dicaf == dicaf1
                    cond3  = btype and (btype == btype1)
                    if cond1 and cond2 and cond3:
                        del self._data1[i]
                        i -= 1
                        count += 1
                    i += 1
            sh.log.append (f,_('DEBUG')
                          ,_('Blocks removed: %d') % count
                          )
            sh.log.append (f,_('DEBUG')
                          ,_('Length of data1: %d') % len(self._data1)
                          )
            sh.log.append (f,_('DEBUG')
                          ,_('Length of data2: %d') % len(self._data2)
                          )
        else:
            sh.com.cancel(f)
    
    def sum(self):
        f = '[MClient] plugins.multitran.elems.Elems.sum'
        if self.Success:
            tmp = [self._data1,self._data2]
            tmp = [list(item) for item in tmp if item]
            self._data = []
            for item in tmp:
                self._data += item
            else:
                sh.com.cancel(f)
    
    def run(self):
        self.duplicates()
        self.sum()
        return self._data
        
